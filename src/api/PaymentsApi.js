/**
 * Payments
 * Enable your customers to make intrabank or IBFT payments through our payment APIs.
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Payments service.
* @module api/PaymentsApi
* @version 1.0.3
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the initiateWalletPayment operation.
     * @callback module:api/PaymentsApi~initiateWalletPaymentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make Payments
     * @param {Number} walletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemId 
     * @param {Number} opts.xNeemPartnerId 
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/PaymentsApi~initiateWalletPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    initiateWalletPayment(walletId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling initiateWalletPayment");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Neem-Id': opts['xNeemId'],
        'X-Neem-Partner-Id': opts['xNeemPartnerId']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/payment-initiate/{walletId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletBillInquiry operation.
     * @callback module:api/PaymentsApi~walletBillInquiryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bill Inquiry
     * @param {String} walletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemId 
     * @param {Number} opts.xNeemPartnerId 
     * @param {String} opts.endToEndIdentification 
     * @param {String} opts.productId 
     * @param {String} opts.consumerNumber 
     * @param {module:api/PaymentsApi~walletBillInquiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    walletBillInquiry(walletId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling walletBillInquiry");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
        'endToEndIdentification': opts['endToEndIdentification'],
        'productId': opts['productId'],
        'consumerNumber': opts['consumerNumber']
      };
      let headerParams = {
        'X-Neem-Id': opts['xNeemId'],
        'X-Neem-Partner-Id': opts['xNeemPartnerId']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/bill/inquiry/{walletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletBillPayment operation.
     * @callback module:api/PaymentsApi~walletBillPaymentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bill Payment
     * @param {Number} walletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemId 
     * @param {Number} opts.xNeemPartnerId 
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/PaymentsApi~walletBillPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    walletBillPayment(walletId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling walletBillPayment");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Neem-Id': opts['xNeemId'],
        'X-Neem-Partner-Id': opts['xNeemPartnerId']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/bill/payment/{walletId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletPaymentInquiry operation.
     * @callback module:api/PaymentsApi~walletPaymentInquiryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Payment Inquiry
     * @param {String} walletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemId 
     * @param {Number} opts.xNeemPartnerId 
     * @param {String} opts.endToEndIdentification 
     * @param {String} opts.paymentScheme 
     * @param {String} opts.amount 
     * @param {String} opts.currency 
     * @param {String} opts.creditorIdentification 
     * @param {String} opts.creditorName 
     * @param {String} opts.creditorInstitutionIdentification 
     * @param {String} opts.creditorSecondaryIdentification 
     * @param {Array.<Object>} opts.extendedProperties 
     * @param {module:api/PaymentsApi~walletPaymentInquiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    walletPaymentInquiry(walletId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling walletPaymentInquiry");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
        'endToEndIdentification': opts['endToEndIdentification'],
        'paymentScheme': opts['paymentScheme'],
        'amount': opts['amount'],
        'currency': opts['currency'],
        'creditorIdentification': opts['creditorIdentification'],
        'creditorName': opts['creditorName'],
        'creditorInstitutionIdentification': opts['creditorInstitutionIdentification'],
        'creditorSecondaryIdentification': opts['creditorSecondaryIdentification'],
        'extendedProperties': this.apiClient.buildCollectionParam(opts['extendedProperties'], 'multi')
      };
      let headerParams = {
        'X-Neem-Id': opts['xNeemId'],
        'X-Neem-Partner-Id': opts['xNeemPartnerId']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/payment-inquiry/{walletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
